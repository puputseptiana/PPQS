SQL
dari Wikipedia, ensiklopedia gratis
Langsung ke navigasiLangsung ke pencarian
Artikel ini adalah tentang bahasa database. Untuk kegunaan lain, lihat SQL (disambiguasi) .
"SEQUEL" dialihkan ke sini. Untuk topik kata, lihat sekuel . Untuk kegunaan lain, lihat Sekuel (disambiguasi) .
QL ( / s k juː l / ( mendengarkan ) SQL , [4] / s iː k w l / " sekuel "; Structured Query Language ) [5] adalah bahasa khusus domain yang digunakan dalam pemrograman dan dirancang untuk mengelola data yang disimpan dalam sistem manajemen basis data relasional (RDBMS), atau untuk pemrosesan aliran dalam sistem manajemen aliran data relasional (RDSMS). Ini sangat berguna dalam menanganidata terstruktur , yaitu data yang menggabungkan hubungan antara entitas dan variabel.

SQL menawarkan dua keunggulan utama dibandingkan API baca-tulis yang lebih lama seperti ISAM atau VSAM . Pertama, memperkenalkan konsep mengakses banyak catatan dengan satu perintah tunggal. Kedua, menghilangkan kebutuhan untuk menentukan bagaimana mencapai rekor, misalnya dengan atau tanpa indeks .

Awalnya didasarkan pada aljabar relasional dan kalkulus relasional tupel , SQL terdiri dari banyak jenis pernyataan, [6] yang dapat secara informal diklasifikasikan sebagai subbahasa , umumnya: bahasa kueri data (DQL), [a] bahasa definisi data (DDL), [a] bahasa definisi data (DDL), [b] bahasa kontrol data (DCL), dan bahasa manipulasi data (DML). [c] [7] Ruang lingkup SQL meliputi query data, manipulasi data (menyisipkan, memperbarui dan menghapus), definisi data ( pembuatan dan modifikasi skema ), dan kontrol akses data. Meskipun SQL pada dasarnya adalahbahasa deklaratif ( 4GL ), itu juga termasuk elemen prosedural .

SQL adalah salah satu bahasa komersial pertama yang menggunakan model relasional Edgar F. Codd . Model tersebut dijelaskan dalam makalahnya yang berpengaruh pada tahun 1970, "A Relational Model of Data for Large Shared Data Banks". [8] Meskipun tidak sepenuhnya mengikuti model relasional seperti yang dijelaskan oleh Codd , itu menjadi bahasa database yang paling banyak digunakan. [9] [10]

SQL menjadi standar dari American National Standards Institute (ANSI) pada tahun 1986 dan Organisasi Internasional untuk Standardisasi (ISO) pada tahun 1987. [11] Sejak itu, standar tersebut telah direvisi untuk memasukkan serangkaian fitur yang lebih besar. Terlepas dari adanya standar, sebagian besar kode SQL memerlukan setidaknya beberapa perubahan sebelum porting ke sistem database yang berbeda .


Isi
1	Sejarah
2	Sintaksis
3	Ekstensi prosedural
4	Interoperabilitas dan standarisasi
4.1	Ringkasan
4.2	Alasan ketidakcocokan
4.3	Sejarah standarisasi
4.4	Standar saat ini
5	Alternatif
6	Pemrosesan SQL terdistribusi
7	Kritik
7.1	Rancangan
7.2	Ortogonalitas dan kelengkapan
7.3	Batal
7.4	Duplikat
7.5	Ketidakcocokan impedansi
8	tipe data SQL
8.1	Tipe data yang telah ditentukan sebelumnya
9	Lihat juga
10	Catatan
11	Referensi
12	Sumber
13	Tautan eksternal
Sejarah 
SQL awalnya dikembangkan di IBM oleh Donald D. Chamberlin dan Raymond F. Boyce setelah belajar tentang model relasional dari Edgar F. Codd [12] pada awal 1970-an. [13] Versi ini, awalnya disebut SEQUEL (Structured English Query Language), dirancang untuk memanipulasi dan mengambil data yang disimpan dalam sistem manajemen basis data kuasi-relasional asli IBM, System R , yang dikembangkan oleh sebuah grup di IBM San Jose Research Laboratory selama 1970-an. [13]

Upaya pertama Chamberlin dan Boyce pada bahasa database relasional adalah SQUARE (Specifying Query in A Relational Environment), tetapi sulit untuk digunakan karena notasi subscript/superscript. Setelah pindah ke San Jose Research Laboratory pada tahun 1973, mereka mulai mengerjakan sekuel SQUARE. [12] Nama SEQUEL kemudian diubah menjadi SQL (menghilangkan vokal) karena "SEQUEL" adalah merek dagang dari perusahaan Hawker Siddeley Dynamics Engineering Limited yang berbasis di Inggris . [14] Label SQL kemudian menjadi akronim untuk Structured Query Language.

Setelah menguji SQL di situs uji pelanggan untuk menentukan kegunaan dan kepraktisan sistem, IBM mulai mengembangkan produk komersial berdasarkan prototipe Sistem R mereka, termasuk System/38 , SQL/DS , dan IBM Db2 , yang tersedia secara komersial pada tahun 1979, 1981 , dan 1983, masing-masing. [15]

Pada akhir 1970-an, Relational Software, Inc. (sekarang Oracle Corporation ) melihat potensi konsep yang dijelaskan oleh Codd, Chamberlin, dan Boyce, dan mengembangkan RDBMS berbasis SQL mereka sendiri dengan aspirasi untuk menjualnya ke Angkatan Laut AS , Central Intelligence Badan , dan lembaga pemerintah AS lainnya. Pada bulan Juni 1979, Relational Software memperkenalkan salah satu implementasi SQL pertama yang tersedia secara komersial, Oracle V2 (Version2) untuk komputer VAX .

Pada tahun 1986, kelompok standar ANSI dan ISO secara resmi mengadopsi definisi bahasa standar "Bahasa Database SQL". Versi baru dari standar diterbitkan pada tahun 1989, 1992, 1996, 1999, 2003, 2006, 2008, 2011, [12] dan yang terbaru, 2016. [16]

Sintaks 
Artikel utama: Sintaks SQL
{\displaystyle \left.{\begin{array}{rl}\textstyle {\mathtt {UPDATE~clause}}&\{{\mathtt {UPDATE\ country}}\\\textstyle {\mathtt {SET~clause} }&\{{\mathtt {SET\ population=~}}\overbrace {\mathtt {population+1}} ^{\mathtt {expression}}\\\textstyle {\mathtt {WHERE~clause}}&\{ {\mathtt {WHERE\ \underbrace {{name=}\overbrace {'USA'} ^{expression}} _{predicate};}}\end{array}}\right\}{\textstyle {\texttt {pernyataan }}}}{\displaystyle \left.{\begin{array}{rl}\textstyle {\mathtt {UPDATE~clause}}&\{{\mathtt {UPDATE\ country}}\\\textstyle {\mathtt {SET~clause} }&\{{\mathtt {SET\ population=~}}\overbrace {\mathtt {population+1}} ^{\mathtt {expression}}\\\textstyle {\mathtt {WHERE~clause}}&\{ {\mathtt {WHERE\ \underbrace {{name=}\overbrace {'USA'} ^{expression}} _{predicate};}}\end{array}}\right\}{\textstyle {\texttt {pernyataan }}}}
Bagan yang menunjukkan beberapa elemen bahasa SQL yang terdiri dari satu pernyataan
Bahasa SQL dibagi lagi menjadi beberapa elemen bahasa, antara lain:

Clauses , adalah komponen penyusun pernyataan dan query. (Dalam beberapa kasus, ini opsional.) [17]
Ekspresi , yang dapat menghasilkan nilai skalar , atau tabel yang terdiri dari kolom dan baris data
Predikat , yang menentukan kondisi yang dapat dievaluasi ke logika tiga nilai SQL (3VL) (benar/salah/tidak diketahui) atau nilai kebenaran Boolean dan digunakan untuk membatasi efek pernyataan dan kueri, atau untuk mengubah alur program.
Query , yang mengambil data berdasarkan kriteria tertentu. Ini adalah elemen penting dari SQL .
Pernyataan , yang mungkin memiliki efek terus-menerus pada skema dan data, atau dapat mengontrol transaksi , aliran program, koneksi, sesi, atau diagnostik.
Pernyataan SQL juga menyertakan terminator pernyataan titik koma (";"). Meskipun tidak diperlukan pada setiap platform, ini didefinisikan sebagai bagian standar dari tata bahasa SQL.
Spasi yang tidak signifikan umumnya diabaikan dalam pernyataan dan kueri SQL, sehingga lebih mudah untuk memformat kode SQL agar mudah dibaca.
Ekstensi prosedural 
SQL dirancang untuk tujuan tertentu: untuk meminta data yang terkandung dalam database relasional . SQL adalah bahasa pemrograman deklaratif berbasis set , bukan bahasa pemrograman imperatif seperti C atau BASIC . Namun, ekstensi ke SQL Standar menambahkan fungsionalitas bahasa pemrograman prosedural , seperti konstruksi kontrol aliran. Ini termasuk:

Sumber	Singkatan	Nama lengkap
Standar ANSI/ISO	SQL/PSM	Modul Tersimpan SQL/Persisten
Interbase / Burung Api	PSQL	SQL prosedural
IBM Db2	SQL PL	Bahasa Prosedur SQL (menerapkan SQL/PSM)
IBM Informix	SPL	Bahasa Prosedur Tersimpan
IBM Netezza	NZPLSQL [18]	(berdasarkan Postgres PL/pgSQL)
Innovatif	PSQL [19]	SQL Prosedural Invantive (menerapkan SQL/PSM dan PL/SQL )
MariaDB	SQL/PSM , PL/SQL	SQL/Persistent Stored Module (menerapkan SQL/PSM), Bahasa Prosedural/SQL (berdasarkan Ada ) [20]
Microsoft / Sybase	T-SQL	Transact-SQL
Mimer SQL	SQL/PSM	SQL/Persistent Stored Module (menerapkan SQL/PSM)
MySQL	SQL/PSM	SQL/Persistent Stored Module (menerapkan SQL/PSM)
MonetDB	SQL/PSM	SQL/Persistent Stored Module (menerapkan SQL/PSM)
NuoDB	SSP	Prosedur Tersimpan Starkey
Peramal	PL/SQL	Bahasa Prosedural/SQL (berdasarkan Ada )
PostgreSQL	PL/pgSQL	Bahasa Prosedural/Bahasa Kueri Terstruktur PostgreSQL (berdasarkan PL/SQL yang dikurangi )
SAP R/3	ABAP	Pemrograman Aplikasi Bisnis Tingkat Lanjut
SAP HANA	Skrip SQL	Skrip SQL
sybase	Watcom-SQL	SQL Anywhere Watcom-SQL Dialek
Teradata	SPL	Bahasa Prosedur Tersimpan
Selain ekstensi SQL/PSM standar dan ekstensi SQL berpemilik, programabilitas prosedural dan berorientasi objek tersedia di banyak platform SQL melalui integrasi DBMS dengan bahasa lain. Standar SQL mendefinisikan ekstensi SQL/JRT (SQL Routines and Types for Java Programming Language) untuk mendukung kode Java dalam database SQL. Microsoft SQL Server 2005 menggunakan SQLCLR (SQL Server Common Language Runtime) untuk menghosting rakitan .NET terkelola dalam database , sementara versi SQL Server sebelumnya dibatasi untuk prosedur tersimpan diperpanjang yang tidak dikelola, terutama ditulis dalam C. PostgreSQLmemungkinkan pengguna menulis fungsi dalam berbagai bahasa—termasuk Perl , Python , Tcl , JavaScript (PL/V8) dan C. [21]

Interoperabilitas dan standardisasi 
Ikhtisar 
Implementasi SQL tidak kompatibel antar vendor dan tidak sepenuhnya mengikuti standar. Secara khusus, sintaks tanggal dan waktu, rangkaian string, s, dan sensitivitas kasusNULL perbandingan bervariasi dari vendor ke vendor. Pengecualian khusus adalah PostgreSQL [22] dan Mimer SQL [23] yang mengupayakan kepatuhan standar, meskipun PostgreSQL tidak mematuhi standar dalam semua kasus. Misalnya, pelipatan nama yang tidak dikutip menjadi huruf kecil di PostgreSQL tidak sesuai dengan standar SQL, [24] yang mengatakan bahwa nama yang tidak dikutip harus dilipat menjadi huruf besar. [25] Jadi, harus setara dengan tidak sesuai standar. FooFOOfoo

Implementasi SQL yang populer biasanya menghilangkan dukungan untuk fitur dasar SQL Standar, seperti tipe data DATEor . TIMEContoh yang paling jelas, dan kebetulan yang paling populer komersial dan DBMS SQL berpemilik, adalah Oracle (yang DATEberperilaku sebagai DATETIME, [26] [27] dan tidak memiliki TIMEtipe) [28] dan MS SQL Server (sebelum versi 2008). Akibatnya, kode SQL jarang dapat di-porting antar sistem database tanpa modifikasi.

Alasan ketidakcocokan 
Beberapa alasan kurangnya portabilitas antara sistem database meliputi:

Kompleksitas dan ukuran standar SQL berarti bahwa sebagian besar pelaksana tidak mendukung seluruh standar.
Standar tidak menentukan perilaku database di beberapa area penting (misalnya indeks , penyimpanan file ...), meninggalkan implementasi untuk memutuskan bagaimana berperilaku.
Standar SQL secara tepat menentukan sintaks yang harus diterapkan oleh sistem database yang sesuai. Namun, spesifikasi standar semantik konstruksi bahasa kurang terdefinisi dengan baik, menyebabkan ambiguitas.
Banyak vendor database memiliki basis pelanggan yang besar; di mana versi standar SQL yang lebih baru bertentangan dengan perilaku sebelumnya dari basis data vendor, vendor mungkin tidak mau merusak kompatibilitas ke belakang .
Ada sedikit insentif komersial bagi vendor untuk membuat pemasok basis data berubah lebih mudah (lihat vendor lock-in ).
Pengguna yang mengevaluasi perangkat lunak basis data cenderung menempatkan faktor-faktor lain seperti kinerja lebih tinggi dalam prioritas mereka daripada kesesuaian standar.
Sejarah standardisasi 
SQL diadopsi sebagai standar oleh ANSI pada tahun 1986 sebagai SQL-86 [29] dan ISO pada tahun 1987. [11] SQL dikelola oleh ISO/IEC JTC 1, Teknologi informasi, Subkomite SC 32, Manajemen data dan pertukaran .

Sampai tahun 1996, program standar manajemen data Institut Nasional Standar dan Teknologi (NIST) mensertifikasi SQL DBMS sesuai dengan standar SQL. Vendor sekarang menyatakan sendiri kepatuhan produk mereka. [30]

Standar asli menyatakan bahwa pengucapan resmi untuk "SQL" adalah inisialisasi : / s k juː l / ( " ess cue el") . [9] Bagaimanapun, banyak profesional database berbahasa Inggris (termasuk Donald Chamberlin sendiri [31] ) menggunakan akronim -seperti pengucapan / s iː k w əl / ("sekuel"), [32] mencerminkan nama pengembangan prarilis bahasa , "SEKUEL". [13] [14] [31]
Standar SQL telah melalui banyak revisi:

Tahun	Nama	Alias	Komentar
1986	SQL-86	SQL-87	Pertama kali diformalkan oleh ANSI
1989	SQL-89	FIPS 127-1	Revisi kecil yang menambahkan batasan integritas yang diadopsi sebagai FIPS 127-1
1992	SQL-92	SQL2, FIPS 127-2	Revisi besar (ISO 9075), Entry Level SQL-92 diadopsi sebagai FIPS 127-2
1999	SQL: 1999	SQL3	Menambahkan pencocokan ekspresi reguler, kueri rekursif (mis . penutupan transitif ), pemicu , dukungan untuk pernyataan prosedural dan kontrol-aliran, tipe nonskalar (array), dan beberapa fitur berorientasi objek (mis . tipe terstruktur ), dukungan untuk menyematkan SQL di Java ( SQL/OLB ) dan sebaliknya ( SQL/JRT )
2003	SQL: 2003		Memperkenalkan fitur terkait XML ( SQL/XML ), fungsi jendela , urutan standar, dan kolom dengan nilai yang dibuat secara otomatis (termasuk kolom identitas)
2006	SQL:2006		ISO/IEC 9075-14:2006 mendefinisikan cara SQL dapat digunakan dengan XML. Ini mendefinisikan cara mengimpor dan menyimpan data XML dalam database SQL, memanipulasinya di dalam database, dan menerbitkan XML dan data SQL konvensional dalam bentuk XML. Selain itu, ini memungkinkan aplikasi mengintegrasikan kueri ke dalam kode SQL mereka dengan XQuery , Bahasa Kueri XML yang diterbitkan oleh World Wide Web Consortium ( W3C ), untuk secara bersamaan mengakses data SQL dan dokumen XML biasa. [33]
2008	SQL:2008		Melegalkan ORDER BY di luar definisi kursor. Menambahkan BUKAN pemicu, pernyataan TRUNCATE, [34] klausa FETCH
2011	SQL:2011		Menambahkan data temporal (PERIODE UNTUK) [35] (informasi lebih lanjut di database Temporal#History ). Penyempurnaan untuk fungsi jendela dan klausa FETCH. [36]
2016	SQL:2016		Menambahkan pencocokan pola baris, fungsi tabel polimorfik, JSON
2019	SQL:2019		Menambahkan Bagian 15, array multidimensi (tipe dan operator MDarray)
Standar saat ini 
Standar biasanya dilambangkan dengan pola: ISO/IEC DIS 9075-n:yyyy Bagian n: title , atau, sebagai jalan pintas, ISO/IEC 9075 (Istilah 'DIS' tidak digunakan dalam versi yang lebih lama). Pihak yang berkepentingan dapat membeli dokumen standar dari ISO, [37] IEC, atau ANSI. Beberapa draf lama tersedia secara gratis. [38] [39] [40]

ISO/IEC 9075 dilengkapi dengan ISO/IEC 13249: SQL Multimedia and Application Packages dan beberapa laporan Teknis .

Anatomi SQL Standar 
Standar SQL dibagi menjadi 10 bagian, tetapi dengan celah dalam penomoran karena penarikan bagian yang sudah ketinggalan zaman.

ISO/IEC 9075-1:2016 Bagian 1: Kerangka Kerja (SQL/Framework). Ini memberikan konsep logis. [41]
ISO/IEC 9075-2:2016 Bagian 2: Yayasan (SQL/Yayasan). Ini berisi elemen paling sentral dari bahasa dan terdiri dari fitur wajib dan opsional .
ISO/IEC 9075-3:2016 Bagian 3: Antarmuka Tingkat Panggilan ( SQL/CLI ). Ini mendefinisikan komponen antarmuka (struktur, prosedur, binding variabel) yang dapat digunakan untuk mengeksekusi pernyataan SQL dari aplikasi yang ditulis dalam Ada, C masing-masing C++, COBOL, Fortran, MUMPS, Pascal atau PL/I. (Untuk Java lihat bagian 10.) SQL/CLI didefinisikan sedemikian rupa sehingga pernyataan SQL dan panggilan prosedur SQL/CLI diperlakukan terpisah dari kode sumber aplikasi pemanggil. Open Database Connectivity adalah superset SQL/CLI yang terkenal. Bagian standar ini hanya terdiri dari fitur wajib .
ISO/IEC 9075-4:2016 Bagian 4: Modul tersimpan yang persisten ( SQL/PSM ). Ini menstandarisasi ekstensi prosedural untuk SQL, termasuk aliran kontrol, penanganan kondisi, sinyal kondisi pernyataan dan pengunduran diri, kursor dan variabel lokal, dan penugasan ekspresi ke variabel dan parameter. Selain itu, SQL/PSM meresmikan deklarasi dan pemeliharaan rutin bahasa database persisten (misalnya, "prosedur tersimpan"). Bagian standar ini hanya terdiri dari fitur opsional .
ISO/IEC 9075-9:2016 Bagian 9: Manajemen Data Eksternal ( SQL/MED ). Ini menyediakan ekstensi ke SQL yang mendefinisikan pembungkus data asing dan tipe datalink untuk memungkinkan SQL mengelola data eksternal. Data eksternal adalah data yang dapat diakses, tetapi tidak dikelola oleh, DBMS berbasis SQL. Bagian standar ini hanya terdiri dari fitur opsional .
ISO/IEC 9075-10:2016 Bagian 10: Object language binding ( SQL/OLB ). Ini mendefinisikan sintaks dan semantik SQLJ , yang merupakan SQL tertanam di Jawa (lihat juga bagian 3). Standar ini juga menjelaskan mekanisme untuk memastikan portabilitas biner aplikasi SQLJ dan menentukan berbagai paket Java dan kelas yang terkandung di dalamnya. Bagian standar ini hanya terdiri dari fitur opsional . Tidak seperti SQL/OLB, JDBC mendefinisikan API dan bukan bagian dari standar SQL. [ rujukan? ]
ISO/IEC 9075-11:2016 Bagian 11: Skema informasi dan definisi ( SQL/Schemata ). Ini mendefinisikan Skema Informasi dan Skema Definisi, menyediakan seperangkat alat umum untuk membuat database SQL dan objek yang menggambarkan dirinya sendiri. Alat-alat ini termasuk pengidentifikasi objek SQL, batasan struktur dan integritas, spesifikasi keamanan dan otorisasi, fitur dan paket ISO/IEC 9075, dukungan fitur yang disediakan oleh implementasi DBMS berbasis SQL, informasi implementasi DBMS berbasis SQL dan item ukuran, dan nilai yang didukung oleh implementasi DBMS. [42] Bagian standar ini berisi fitur wajib dan opsional .
ISO/IEC 9075-13:2016 Bagian 13: Rutinitas dan tipe SQL menggunakan bahasa pemrograman Java TM ( SQL/JRT ). Ini menentukan kemampuan untuk memanggil metode Java statis sebagai rutinitas dari dalam aplikasi SQL ('Java-in-the-database'). Ini juga membutuhkan kemampuan untuk menggunakan kelas Java sebagai tipe yang ditentukan pengguna terstruktur SQL. Bagian standar ini hanya terdiri dari fitur opsional .
ISO/IEC 9075-14:2016 Bagian 14: Spesifikasi Terkait XML ( SQL/XML ). Ini menentukan ekstensi berbasis SQL untuk menggunakan XML dalam hubungannya dengan SQL. Tipe data XML diperkenalkan, serta beberapa rutinitas, fungsi, dan pemetaan tipe data XML-ke-SQL untuk mendukung manipulasi dan penyimpanan XML dalam database SQL. [33] Bagian standar ini hanya terdiri dari fitur opsional . [ rujukan? ]
ISO/IEC 9075-15:2019 Bagian 15: Array multidimensi (SQL/MDA). Ini menentukan tipe array multidimensi (MDarray) untuk SQL, bersama dengan operasi pada MDarrays, irisan MDarray, sel MDarray, dan fitur terkait. Bagian standar ini hanya terdiri dari fitur opsional .
Ekstensi ke Standar SQL 
ISO/IEC 9075 dilengkapi dengan ISO/IEC 13249 SQL Multimedia and Application Packages . Standar yang terkait erat tetapi terpisah ini dikembangkan oleh komite yang sama. Ini mendefinisikan antarmuka dan paket berdasarkan SQL. Tujuannya adalah akses terpadu ke aplikasi database khas seperti teks, gambar, data mining, atau data spasial .

ISO/IEC 13249-1:2016 Bagian 1: Kerangka
ISO/IEC 13249-2:2003 Bagian 2: Teks Lengkap
ISO/IEC 13249-3:2016 Bagian 3: Spasial
ISO/IEC 13249-5:2003 Bagian 5: Gambar diam
ISO/IEC 13249-6:2006 Bagian 6: Penambangan data
ISO/IEC 13249-7:2013 Bagian 7: Sejarah
ISO/IEC 13249-8:xxxx Bagian 8: MRA Akses Registri Metadata (sedang dalam proses)
Laporan teknis 
ISO/IEC 9075 juga disertai dengan serangkaian Laporan Teknis, diterbitkan sebagai ISO/IEC TR 19075. Laporan Teknis ini menjelaskan pembenaran dan penggunaan beberapa fitur SQL, memberikan contoh jika sesuai. Laporan Teknis bersifat non-normatif; jika ada perbedaan dari 9075, teks di 9075 berlaku. Laporan Teknis 19075 yang tersedia saat ini adalah:

ISO/IEC TR 19075-1:2011 Bagian 1: Dukungan Ekspresi Reguler XQuery di SQL
ISO/IEC TR 19075-2:2015 Bagian 2: Dukungan SQL untuk Informasi Terkait Waktu
ISO/IEC TR 19075-3:2015 Bagian 3: SQL Tertanam dalam Program yang menggunakan bahasa pemrograman Java
ISO/IEC TR 19075-4:2015 Bagian 4: SQL dengan Rutinitas dan tipe menggunakan bahasa pemrograman Java
ISO/IEC TR 19075-5:2016 Bagian 5: Pengenalan Pola Baris dalam SQL
ISO/IEC TR 19075-6:2017 Bagian 6: Dukungan SQL untuk JavaScript Object Notation (JSON)
ISO/IEC TR 19075-7:2017 Bagian 7: Fungsi tabel polimorfik dalam SQL
ISO/IEC TR 19075-8:2019 Bagian 8: Array Multi-Dimensi (SQL/MDA)
ISO/IEC TR 19075-9:2020 Bagian 9: Kemampuan pemrosesan analitik online (OLAP)
Alternatif 
Perbedaan harus dibuat antara alternatif SQL sebagai bahasa, dan alternatif model relasional itu sendiri. Di bawah ini adalah alternatif relasional yang diusulkan untuk bahasa SQL. Lihat database navigasi dan NoSQL untuk alternatif model relasional.

.QL : Datalog berorientasi objek
Bahasa Kueri 4D (4D QL)
Datalog : kritikus menyarankan bahwa Datalog memiliki dua keunggulan dibandingkan SQL: memiliki semantik yang lebih bersih, yang memfasilitasi pemahaman dan pemeliharaan program, dan lebih ekspresif, khususnya untuk kueri rekursif. [43]
HTTP : Metode kueri berbasis URL
IBM Business System 12 (IBM BS12): salah satu sistem manajemen basis data relasional pertama, diperkenalkan pada tahun 1982
ISBL
jOOQ : SQL diimplementasikan di Java sebagai bahasa khusus domain internal
Java Persistence Query Language (JPQL): Bahasa kueri yang digunakan oleh Java Persistence API dan Hibernate persistent library
JavaScript : MongoDB mengimplementasikan bahasa kuerinya dalam API JavaScript.
LINQ : Menjalankan pernyataan SQL yang ditulis seperti konstruksi bahasa untuk meminta koleksi langsung dari dalam .Net code
Bahasa Kueri Objek
QBE ( Query By Example ) dibuat oleh Mosh Zloof, IBM 1977
QUEL diperkenalkan pada tahun 1974 oleh proyek UC Berkeley Ingres, lebih dekat ke kalkulus relasional tuple daripada SQL
Tutorial D
Permintaan X
Pemrosesan SQL terdistribusi 
Arsitektur Database Relasional Terdistribusi (DRDA) dirancang oleh kelompok kerja dalam IBM dari tahun 1988 hingga 1994. DRDA memungkinkan database relasional yang terhubung ke jaringan untuk bekerja sama untuk memenuhi permintaan SQL. [44] [45]

Pengguna atau program interaktif dapat mengeluarkan pernyataan SQL ke RDB lokal dan menerima tabel data dan indikator status sebagai balasan dari RDB jarak jauh. Pernyataan SQL juga dapat dikompilasi dan disimpan dalam RDB jarak jauh sebagai paket dan kemudian dipanggil dengan nama paket. Ini penting untuk operasi yang efisien dari program aplikasi yang mengeluarkan kueri frekuensi tinggi yang kompleks. Ini sangat penting ketika tabel yang akan diakses berada di sistem jarak jauh.

Pesan, protokol, dan komponen struktural DRDA ditentukan oleh Arsitektur Manajemen Data Terdistribusi . Pemrosesan SQL terdistribusi ala DRDA berbeda dari database SQL terdistribusi kontemporer .

Kritik 
Desain 
SQL menyimpang dalam beberapa cara dari landasan teoretisnya, model relasional dan kalkulus tupelnya. Dalam model itu, tabel adalah kumpulan tupel, sedangkan di SQL, tabel dan hasil kueri adalah daftar baris; baris yang sama dapat muncul beberapa kali, dan urutan baris dapat digunakan dalam kueri (misalnya dalam klausa LIMIT). Kritikus berpendapat bahwa SQL harus diganti dengan bahasa yang kembali ke dasar aslinya: misalnya, lihat The Third Manifesto .

Ortogonalitas dan kelengkapan 
Spesifikasi awal tidak mendukung fitur utama, seperti kunci utama. Kumpulan hasil tidak dapat diberi nama, dan subkueri belum ditentukan. Ini ditambahkan pada tahun 1992. [12]

Kurangnya jumlah tipe telah digambarkan sebagai penghalang jalan untuk penggunaan penuh tipe yang ditentukan pengguna SQL. Dukungan JSON, misalnya, perlu ditambahkan dengan standar baru pada tahun 2016. [46]

Null 
Konsep Null adalah subyek dari beberapa perdebatan . Penanda Null menunjukkan tidak adanya nilai, dan berbeda dari nilai 0 untuk kolom bilangan bulat atau string kosong untuk kolom teks. Konsep Nulls menerapkan logika 3-nilai dalam SQL , yang merupakan implementasi konkret dari logika 3-nilai umum . [12]

Duplikat 
Kritik populer lainnya adalah memungkinkan baris duplikat, membuat integrasi dengan bahasa seperti Python , yang tipe datanya mungkin membuat representasi data secara akurat menjadi sulit, [12] dalam hal penguraian dan tidak adanya modularitas. [47]

Ini biasanya dihindari dengan mendeklarasikan kunci utama, atau batasan unik, dengan satu atau lebih kolom yang secara unik mengidentifikasi baris dalam tabel.

Ketidakcocokan impedansi 
Dalam arti yang mirip dengan ketidakcocokan impedansi objek-relasional , ketidakcocokan terjadi antara bahasa SQL deklaratif dan bahasa prosedural di mana SQL biasanya disematkan.

Tipe data SQL 
Standar SQL mendefinisikan tiga jenis tipe data : [ rujukan? ]

tipe data yang telah ditentukan sebelumnya
tipe yang dibangun
jenis yang ditentukan pengguna.
Tipe yang dibangun adalah salah satu dari ARRAY, MULTISET, REF(erence), atau ROW. Tipe yang ditentukan pengguna sebanding dengan kelas dalam bahasa berorientasi objek dengan konstruktor, pengamat, mutator, metode, pewarisan, kelebihan beban, penimpaan, antarmuka, dan sebagainya mereka sendiri. Tipe data yang telah ditentukan secara intrinsik didukung oleh implementasi.

Tipe data standar 
Tipe karakter
Karakter (CHAR)
Karakter bervariasi (VARCHAR)
Karakter objek besar (CLOB)
Jenis karakter nasional
Karakter bangsa (NCHAR)
Karakter bangsa yang bervariasi (NCHAR VARYING)
Objek besar karakter nasional (NCLOB)
Tipe biner
Biner (BINARY)
Variasi biner (VARBINARY)
Objek besar biner (BLOB)
Tipe numerik
Jenis numerik yang tepat (NUMERIK, DECIMAL, SMALLINT, INTEGER, BIGINT)
Perkiraan tipe numerik (FLOAT, REAL, DOUBLE PRECISION)
Tipe titik-mengambang desimal (DECFLOAT)
Jenis tanggal waktu (TANGGAL, WAKTU, TIMESTAMP)
Jenis interval (INTERVAL)
Boolean
XML
JSON
Lihat juga 
Wikibook SQL
Basis data objek
Daftar sistem manajemen basis data relasional
Perbandingan sistem manajemen basis data relasional
Perbandingan sistem manajemen database objek-relasional
D (spesifikasi bahasa data)
Kueri dengan Contoh
Sintaks SQL
Oracle PL/SQL
Microsoft Transact-SQL (T-SQL)
Pemrosesan transaksi online (OLTP)
Pemrosesan analitik online (OLAP)
Gudang data
Sistem manajemen aliran data relasional
Tanpa SQL
PENYAKIT GONDOK
Model basis data hierarkis
Skema bintang
Skema kepingan salju
Kepatuhan SQL
Catatan 
 Secara formal, pernyataan "SQL-data" tidak termasuk pernyataan"SQL-data change"; ini terutama pernyataan Select .
 Secara formal, pernyataan "SQL-schema".
 Secara formal, pernyataan "SQL-data change"
Referensi 
 Paul, Ryan (24 Oktober 2005). "Tur berpemandu Microsoft Command Shell" . Ars Technica . Diakses tanggal 10 April 2011 .
"Pendaftaran Jenis Media untuk aplikasi/sql" . Otoritas Nomor yang Ditugaskan Internet . 10 April 2013 . Diakses tanggal 10 April 2013 .
"Jenis Media aplikasi/sql, RFC 6922" . Gugus Tugas Rekayasa Internet . April 2013. hal. 3 . Diakses tanggal 10 April 2013 .
 Beaulieu, Alan (April 2009). Mary E Treseler (ed.). Belajar SQL (edisi ke-2). Sebastopol, CA, AS: O'Reilly. ISBN 978-0-596-52083-0.
 Chamberlin, Donald D. (2001-10-03). "Wawancara sejarah lisan dengan Donald D. Chamberlin" . Diakses pada 14-01-2020 . Kami mengubah nama asli "SEQUEL" menjadi SQL karena kami mendapat surat dari pengacara seseorang yang mengatakan bahwa nama "SEQUEL" milik mereka. Kami menyingkatnya menjadi SQL, untuk Structured Query Language, dan produknya dikenal sebagai SQL/DS.
 SQL-92 , 4.22 Pernyataan SQL, 4.22.1 Kelas pernyataan SQL "Setidaknya ada lima cara untuk mengklasifikasikan pernyataan SQL:", 4.22.2, Pernyataan SQL yang diklasifikasikan berdasarkan fungsi "Berikut ini adalah kelas utama dari SQL-pernyataan:"; SQL:2003 4.11 Pernyataan SQL, dan revisi selanjutnya.
 Chatham, Mark (2012). Bahasa Kueri Terstruktur Dengan Contoh - Volume I: Bahasa Kueri Data . p. 8 . ISBN 978-1-29119951-2.
 Codd, Edgar F. (Juni 1970). "Model Data Relasional untuk Bank Data Bersama Besar". Komunikasi ACM . 13 (6): 377–87. CiteSeerX 10.1.1.88.646 . doi : 10.1145/362384.362685 . S2CID 207549016 .  
 Chapple, Mike. "Dasar-Dasar SQL" . Database . Tentang.com . Diakses 28-01-2009 .
"Bahasa Kueri Terstruktur (SQL)" . Mesin Bisnis Internasional. 27 Oktober 2006 . Diakses tanggal 10-06-2007 .
 "ISO 9075:1987: Teknologi informasi – Bahasa database – SQL – Bagian 1: Framework (SQL/Framework)" . 1987-06-01.
 Chamberlin, Donald (2012). "Sejarah Awal SQL". IEEE Annals of the History of Computing . 34 (4): 78–82. doi : 10.1109/MAHC.2012.61 . S2CID 1322572 . 
 Chamberlin, Donald D; Boyce, Raymond F (1974). "SEQUEL: A Structured English Query Language" (PDF) . Prosiding Lokakarya SIGFIDET ACM 1974 tentang Deskripsi, Akses, dan Kontrol Data . Asosiasi untuk Mesin Komputasi: 249–64. Diarsipkan dari versi asli (PDF) pada 26-09-2007 . Diakses 2007-06-09 .
 Oppel, Andy (27 Februari 2004). Database Demystified . San Francisco, CA : McGraw-Hill Osborne Media. hal.90-1. ISBN 978-0-07-146960-9.
"Sejarah IBM, 1978" . Arsip IBM . IBM. 23 Januari 2003 . Diakses 2007-06-09 .
"ISO - ISO/IEC JTC 1/SC 32 - Manajemen dan pertukaran data" . www.iso.org . Diakses pada 2 Januari 2021 .
 ANSI/ISO/IEC Standar Internasional (IS). Bahasa Basis Data SQL—Bagian 2: Dasar (SQL/Yayasan). 1999.
"Sistem IBM PureData untuk Analytics, Versi 7.0.3" .
"SQL prosedural yang inovatif" .
"BUAT PROSEDUR" . Basis Pengetahuan MariaDB . Diakses 23-04-2019 .
"Pemrograman server PostgreSQL" . Dokumentasi resmi PostgreSQL 9.1 . postgresql.org. 2011 . Diakses 03-09-2012 .
"Tentang PostgreSQL" . Situs web resmi PostgreSQL 9.1 . Grup Pengembangan Global PostgreSQL. 2012 . Diakses pada 9 Maret 2012 . PostgreSQL membanggakan diri dalam kepatuhan standar. Implementasi SQL-nya sangat sesuai dengan standar ANSI-SQL:2008
"Mimer SQL, Dibangun berdasarkan Standar" . Situs web resmi Mimer SQL . Teknologi Informasi Mimer. 2009.
"4.1. Struktur Leksikal" . Dokumentasi PostgreSQL . 2018.
"(Draf Tinjauan Informal Kedua) ISO/IEC 9075:1992, Bahasa Basis Data SQL, Bagian 5.2, aturan sintaks 11" . 30 Juli 1992.
 Lorentz, Diana; Roeser, Mary Beth; Abraham, Sundeep; Cinta, Angela; Arora, Geeta; Arora, Vika; Ashdown, Lance; Baer, ​​Hermann; Bellamkonda, Shrikanth (Oktober 2010) [1996]. "Elemen Dasar Oracle SQL: Tipe Data" . Oracle Database SQL Language Reference 11g Rilis 2 (11.2) . Pustaka Dokumentasi Database Oracle. Redwood City, CA: Oracle USA, Inc. Diakses pada 29 Desember 2010 . Untuk setiap nilai, Oracle menyimpan informasi berikut: abad, tahun, bulan, tanggal, jam, menit, dan detikDATE
 Lorentz, Diana; Roeser, Mary Beth; Abraham, Sundeep; Cinta, Angela; Arora, Geeta; Arora, Vika; Ashdown, Lance; Baer, ​​Hermann; Bellamkonda, Shrikanth (Oktober 2010) [1996]. "Elemen Dasar Oracle SQL: Tipe Data" . Oracle Database SQL Language Reference 11g Rilis 2 (11.2) . Pustaka Dokumentasi Database Oracle. Redwood City, CA: Oracle USA, Inc. Diakses pada 29 Desember 2010 . Tipe data datetime adalah ...DATE
 Lorentz, Diana; Roeser, Mary Beth; Abraham, Sundeep; Cinta, Angela; Arora, Geeta; Arora, Vika; Ashdown, Lance; Baer, ​​Hermann; Bellamkonda, Shrikanth (Oktober 2010) [1996]. "Elemen Dasar Oracle SQL: Tipe Data" . Oracle Database SQL Language Reference 11g Rilis 2 (11.2) . Pustaka Dokumentasi Database Oracle. Redwood City, CA: Oracle USA, Inc. Diakses pada 29 Desember 2010 . Jangan tentukan kolom dengan tipe data SQL/DS dan DB2 berikut, karena kolom tersebut tidak memiliki tipe data Oracle yang sesuai:...TIME
"Menemukan Bantuan" . Catatan X3H2, 1978–95 . Institut Standar Nasional Amerika.
 Boneka, Shelley (19 Juni 2002). "Apakah SQL Standar Lagi?" . Builder.com TechRepublic . TechRepublik. Diarsipkan dari versi asli pada 07-05-2012 . Diakses pada 04-12-2016 .
 Gillespie, Patrick. "Mengucapkan SQL: SQL atau Sekuel?" . Diakses pada 12 Februari 2012 .
 Melton, Jim; Alan R Simon (1993). "1.2. Apa itu SQL?" . Memahami SQL Baru: Panduan Lengkap . Morgan Kaufmann. p. 536 . ISBN 978-1-55860-245-8. SQL (diucapkan dengan benar "ess cue ell," alih-alih "sekuel" yang agak umum ...
 Wagner, Michael (2010). SQL/XML:2006 - Evaluasi dari Standardkonformitt ausgewählter Datenbanksysteme . Diplomatik Verlag. p. 100. ISBN 978-3-8366-9609-8.
"SQL:2008 sekarang menjadi standar internasional ISO yang disetujui" . sybase. Juli 2008. Diarsipkan dari versi asli pada 28-06-2011.
 Krishna Kulkarni, Jan-Eike Michels (September 2012). "Fitur sementara di SQL:2011" (PDF) . Catatan SIGMOD . 41 (3).
 Fred Zemke (2012). "Apa yang baru di SQL:2011" (PDF) . Oracle Corporation.
"ISO/IEC 9075" .
SQL:1992 draf (teks)
SQL:2008 draft (Zip) , Whitemarsh Information Systems Corporation
SQL:2011 draft (Zip) , Whitemarsh Information Systems Corporation
"ISO/IEC 9075-1:2016: Teknologi informasi – Bahasa database – SQL – Bagian 1: Framework (SQL/Framework)" .
ISO/IEC 9075-11:2008: Skema Informasi dan Definisi (SQL/Schemata)
 Fernando Saenz-Perez. "Penggabungan Luar dalam Sistem Basis Data Deduktif" (PDF) . Lbd.udc.es . Diakses pada 01-01-16 .
 Reinsch, R. (1988). "Database terdistribusi untuk SAA". Jurnal Sistem IBM . 27 (3): 362–389. doi : 10.1147/sj.273.0362 .
Referensi Arsitektur Database Relasional Terdistribusi . IBM Corp. SC26-4651-0. 1990.
 Brandon, Jamie (Juli 2021). "Melawan SQL" . Diakses pada 2 Agustus 2021 .
 Schauder, Jen. "Mengapa SQL Menyebalkan" . Schauderhaft . Diakses pada 3 Februari 2018 .
Kesalahan pengutipan: Referensi yang ditentukan daftar bernama "ISO/IEC 9075-2:2016" tidak digunakan dalam konten (lihat halaman bantuan ).
Sumber 
Codd, Edgar F (Juni 1970). "Model Data Relasional untuk Bank Data Bersama Besar" . Komunikasi ACM . 13 (6): 377–87. doi : 10.1145/362384.362685 . S2CID  207549016 . Diarsipkan dari versi asli pada 12-06-2007.
Diskusi tentang dugaan kelemahan SQL (wiki C2)
Tanggal CJ ​​dengan Hugh Darwen : Panduan untuk standar SQL : panduan pengguna untuk bahasa database standar SQL, edisi ke-4. , Addison Wesley, AS 1997, ISBN 978-0-201-96426-4 

Tautan eksternal 
SQL
di proyek saudara Wikipedia
Definisi dari Wiktionary
Media dari Commons
Buku teks dari Wikibooks
Sumber daya dari Wikiversity
1995 SQL Reunion: People, Projects, and Politics , oleh Paul McJones (ed.) : transkrip pertemuan reuni yang dikhususkan untuk sejarah pribadi database relasional dan SQL.
Institut Standar Nasional Amerika. X3H2 Records, 1978–1995 Koleksi Institut Charles Babbage mendokumentasikan pengembangan standar NDL dan SQL komite H2.
Wawancara sejarah lisan dengan Donald D. Chamberlin Institut Charles Babbage Dalam sejarah lisan ini Chamberlin menceritakan kehidupan awalnya, pendidikannya di Harvey Mudd College dan Universitas Stanford , dan karyanya pada teknologi basis data relasional. Chamberlin adalah anggota tim peneliti Sistem R dan, dengan Raymond F. Boyce , mengembangkan bahasa database SQL. Chamberlin juga secara singkat membahas penelitiannya yang lebih baru tentang bahasa query XML.
Perbandingan Implementasi SQL yang Berbeda Perbandingan berbagai implementasi SQL ini dimaksudkan sebagai panduan bagi mereka yang tertarik untuk mem-porting kode SQL antara berbagai produk RDBMS, dan mencakup perbandingan antara SQL:2008, PostgreSQL, Db2, MS SQL Server, MySQL, Oracle, dan Informix.
Pemrosesan aliran peristiwa dengan SQL - Pengantar pemrosesan data streaming waktu nyata dengan kueri SQL berkelanjutan
Tata Bahasa BNF untuk ISO/IEC 9075:2003, bagian 2 SQL/Framework



Bahasa kontrol data
Bahasa kontrol data ( DCL ) adalah sintaks yang mirip dengan bahasa pemrograman komputer yang digunakan untuk mengontrol akses ke data yang disimpan dalam database ( otorisasi ). Secara khusus, ini adalah komponen dari Structured Query Language (SQL). Bahasa Kontrol Data adalah salah satu kelompok logis dalam Perintah SQL. SQL [1] adalah bahasa standar untuk sistem manajemen basis data relasional. Pernyataan SQL digunakan untuk melakukan tugas-tugas seperti memasukkan data ke database, menghapus atau memperbarui data dalam database, atau mengambil data dari database.

Meskipun sistem basis data menggunakan SQL, mereka juga memiliki ekstensi kepemilikan tambahan yang biasanya hanya digunakan pada sistem mereka. Misalnya Microsoft SQL server menggunakan Transact-SQL (T-SQL) yang merupakan kepanjangan dari SQL. Demikian pula Oracle menggunakan PL-SQL yang merupakan ekstensi eksklusif untuk mereka saja. Namun, perintah SQL standar seperti "Select", "Insert", "Update", "Delete", "Create", dan "Drop" dapat digunakan untuk menyelesaikan hampir semua hal yang perlu dilakukan dengan database.

Contoh perintah DCL meliputi:

HIBAH untuk mengizinkan pengguna tertentu melakukan tugas tertentu.
REVOKE untuk menghapus aksesibilitas pengguna ke objek database.
Operasi yang hak istimewanya dapat diberikan atau dicabut dari pengguna atau peran berlaku untuk bahasa definisi Data (DDL) dan bahasa manipulasi Data (DML), dan mungkin termasuk CONNECT , SELECT , INSERT , UPDATE, DELETE , EXECUTE , dan PENGGUNAAN .


Isi
1	Microsoft SQL Server
1.1	Contoh
2	Basis Data Oracle
2.1	Contoh
2.2	Pernyataan Kontrol Transaksi di Oracle
3	server MySQL
3.1	Contoh
4	Lihat juga
5	Referensi
Microsoft SQL Server 
Sesuai Microsoft SQL server ada empat kelompok Perintah SQL. (MSSQL)

Bahasa Manipulasi Data (DML)
Bahasa Definisi Data (DDL)
Bahasa Kontrol Data (DCL [2] )
Bahasa Kontrol Transaksi (TCL)
Perintah DCL digunakan untuk kontrol akses dan manajemen izin untuk pengguna dalam database. Dengan mereka kami dapat dengan mudah mengizinkan atau menolak beberapa tindakan untuk pengguna pada tabel atau catatan (keamanan tingkat baris).

Perintah DCL adalah:

MENGANUGERAHKAN
Kami dapat memberikan izin tertentu untuk tabel (dan objek lain) untuk grup/pengguna database tertentu.
MEMBANTAH
melarang izin tertentu dari grup/pengguna.
MENARIK KEMBALI
perintah ini menghilangkan izin dari grup/pengguna.
Misalnya: GRANT dapat digunakan untuk memberikan hak istimewa kepada pengguna untuk melakukan SELECT, INSERT, UPDATE dan DELETE pada tabel tertentu atau beberapa tabel.

Perintah REVOKE digunakan untuk mengambil kembali hak istimewa (default) atau mencabut perintah tertentu seperti UPDATE atau DELETE berdasarkan persyaratan.

Contoh 
 Berikan SELECT , INSERT , UPDATE , DELETE on Employee To User1     

 Cabut INSERT On Employee To user1     

 Tolak Pembaruan Pada Karyawan ke pengguna1     
GRANT dalam kasus pertama kami memberikan hak istimewa kepada pengguna User1 untuk melakukan SELECT, INSERT, UPDATE dan DELETE pada tabel yang disebut karyawan.

REVOKE dengan perintah ini kita dapat mengambil kembali privilege ke default, dalam hal ini kita mengambil kembali perintah INSERT pada tabel employee untuk user User1.

DENY adalah perintah khusus. Kami dapat menyimpulkan bahwa setiap pengguna memiliki daftar hak istimewa yang ditolak atau diberikan sehingga perintah DENY ada untuk secara eksplisit melarang Anda beberapa hak istimewa pada objek database.:

Database ORACLE 
Oracle membagi perintah SQL ke tipe yang berbeda. Mereka.

Pernyataan Bahasa Definisi Data (DDL)
Pernyataan Bahasa Manipulasi Data (DML)
Laporan Pengendalian Transaksi
Pernyataan Kontrol Sesi
Pernyataan Kontrol Sistem
Pernyataan SQL Tertanam
Untuk detail lihat Oracle- [3] TCL         

Pernyataan bahasa definisi data (DDL) memungkinkan Anda melakukan tugas-tugas ini:

Buat, ubah, dan jatuhkan objek skema
Memberikan dan mencabut hak istimewa dan peran
Menganalisis informasi pada tabel, indeks, atau cluster
Tetapkan opsi audit
Tambahkan komentar ke kamus data
Jadi perintah DDL database Oracle menyertakan hak Hibah dan cabut yang sebenarnya merupakan bagian dari Bahasa kontrol Data di server Microsoft SQL.

Sintaks untuk hibah dan pencabutan di Oracle:

Contoh 
GRANT  SELECT ,  INSERT ,  UPDATE ,  DELETE  PADA  db1 . Karyawan  KE  pengguna1 ;

REVOKE  SELECT ,  INSERT ,  UPDATE ,  DELETE  PADA  db1 . Karyawan  DARI  user1 ;
Pernyataan Kontrol Transaksi di Oracle 
Pernyataan kontrol transaksi mengelola perubahan yang dibuat oleh pernyataan DML. Pernyataan pengendalian transaksi adalah:

MELAKUKAN
KEMBALI
SAVEPOINT
SET TRANSAKSI
atur batasan
Server MySQL 
Server MySQL mereka membagi pernyataan SQL menjadi berbagai jenis pernyataan

Pernyataan Definisi Data
Pernyataan Manipulasi Data
Pernyataan Transaksional dan Penguncian
Pernyataan Replikasi
Pernyataan yang Disiapkan
Sintaks Pernyataan Majemuk
Pernyataan Administrasi Basis Data
Pernyataan Utilitas
Untuk detail lihat pernyataan Transaksi MySQL [4]

Sintaks hibah, pencabutan adalah sebagai bagian dari pernyataan administrasi DatabaseàSistem Manajemen Akun.

Pernyataan GRANT memungkinkan administrator sistem untuk memberikan hak istimewa dan peran, yang dapat diberikan ke akun dan peran pengguna. Pembatasan sintaks ini berlaku:

GRANT tidak dapat mencampur pemberian hak istimewa dan peran dalam pernyataan yang sama. Pernyataan GRANT yang diberikan harus memberikan hak istimewa atau peran.
Klausa ON membedakan apakah pernyataan memberikan hak istimewa atau peran:
Dengan ON, pernyataan memberikan hak istimewa
Tanpa ON, pernyataan memberikan peran.
Diizinkan untuk menetapkan hak istimewa dan peran ke akun, tetapi Anda harus menggunakan pernyataan GRANT terpisah, masing-masing dengan sintaks yang sesuai dengan apa yang akan diberikan.
Pernyataan REVOKE memungkinkan administrator sistem untuk mencabut hak istimewa dan peran, yang dapat dicabut dari akun dan peran pengguna.

Contoh 
cabut  INSERT  ON  * . *  DARI  'jeffrey' @'localhost' ;

cabut ' role1  ' ,  'role2'  DARI  'user1' @'localhost' ,  'user2' @'localhost' ;

cabut  PILIH  PADA  dunia . *  DARI  'peran3' ;

HIBAH  SEMUA  DI  db1 . *  UNTUK  'jeffrey' @'localhost' ;

HIBAH ' role1  ' ,  'role2'  KE  'user1' @'localhost' ,  'user2' @'localhost' ;

HIBAH  PILIH  PADA  dunia . *  UNTUK  'peran3' ;
Di PostgreSQL , mengeksekusi DCL bersifat transaksional , dan dapat dibatalkan.

Grant dan Revoke adalah perintah SQL yang digunakan untuk mengontrol hak istimewa yang diberikan kepada pengguna dalam Database

SQLite tidak memiliki perintah DCL karena tidak memiliki nama pengguna atau login. Sebaliknya, SQLite bergantung pada izin sistem file untuk menentukan siapa yang dapat membuka dan mengakses database. [5]

Lihat juga 
Bahasa definisi data
Bahasa manipulasi data
Bahasa kueri data
vte
Sistem manajemen basis data
Jenis	
Berorientasi pada objek perbandinganrelasional daftarperbandinganKunci–nilaiBerorientasi kolom daftarBerorientasi dokumenToko kolom lebarGrafikTanpa SQLSQL baruDalam kenangan daftarmulti-model perbandinganAwan
Konsep	
Basis dataASAMAksioma Armstrong12 aturan Coddteorema CAPkasarBatalKunci kandidatKunci asingkunci superKunci penggantiKunci unik
Objek	
Hubungan mejakolombarisMelihatTransaksiLog transaksiPemicuIndeksProsedur tersimpankursorPartisi
Komponen	
Kontrol konkurensiKamus dataJDBCXQJODBCBahasa kueriPengoptimal kueriSistem penulisan ulang kueriPaket kueri
Fungsi	
AdministrasiPengoptimalan kueriReplikasiSharding
topik-topik yang berkaitan	
Model basis dataNormalisasi basis dataPenyimpanan basis dataBasis data terdistribusiSistem basis data gabunganIntegritas referensialaljabar relasionalKalkulus relasionalModel relasionalDatabase objek-relasionalPemrosesan transaksi
 Kategori Garis besar Proyek Wiki
Referensi 
"Standar SQL – ISO/IEC 9075:2016 (ANSI X3.135) – Blog ANSI" . Blog ANSI . 2018-10-05 . Diakses pada 09-2020-19 .
"Teknologi Wiki" . social.technet.microsoft.com . Diakses pada 09-2020-19 .
"Referensi Bahasa SQL Basis Data" . docs.oracle.com . Diakses pada 09-2020-19 .
"MySQL :: Manual Referensi MySQL 8.0 :: 13.7.1 Pernyataan Manajemen Akun" . dev.mysql.com . Diakses pada 09-2020-19 .
 Kreibich, JA, 2010. Menggunakan SQLite , O'Reilly.






Bahasa definisi data
Dalam konteks SQL , definisi data atau bahasa deskripsi data ( DDL ) adalah sintaks untuk membuat dan memodifikasi objek database seperti tabel, indeks, dan pengguna. Pernyataan DDL mirip dengan bahasa pemrograman komputer untuk mendefinisikan struktur data , terutama skema database . Contoh umum pernyataan DDL termasuk CREATE, ALTER, dan DROP.


Isi
1	Sejarah
2	Bahasa Kueri Terstruktur (SQL)
2.1	BUAT pernyataan
2.1.1	pernyataan BUAT TABEL
2.2	DROP pernyataan
2.3	ALTER pernyataan
2.4	Pernyataan TRUNCATE
2.5	Pernyataan integritas referensial
3	Bahasa lainnya
4	Lihat juga
5	Referensi
6	Tautan eksternal
Sejarah 
Konsep bahasa definisi data dan namanya pertama kali diperkenalkan dalam kaitannya dengan model basis data Codasyl , di mana skema basis data ditulis dalam sintaks bahasa yang menggambarkan catatan , bidang , dan set model data pengguna . [1] Kemudian digunakan untuk merujuk ke subset dari Structured Query Language (SQL) untuk mendeklarasikan tabel , kolom, tipe data, dan batasan . SQL-92 memperkenalkan bahasa manipulasi skema dan tabel informasi skema ke skema kueri. [2]Tabel informasi ini ditetapkan sebagai SQL/Schemata di SQL:2003 . Istilah DDL juga digunakan dalam pengertian umum untuk merujuk pada bahasa formal apa pun untuk menggambarkan struktur data atau informasi.

Bahasa Kueri Terstruktur (SQL) 
Banyak bahasa deskripsi data menggunakan sintaks deklaratif untuk mendefinisikan kolom dan tipe data. Structured Query Language (SQL), bagaimanapun, menggunakan kumpulan kata kerja imperatif yang efeknya adalah untuk memodifikasi skema database dengan menambahkan, mengubah, atau menghapus definisi tabel atau elemen lainnya. Pernyataan ini dapat dicampur dengan bebas dengan pernyataan SQL lainnya, membuat DDL bukan bahasa yang terpisah.

BUAT pernyataan 
Perintah create digunakan untuk membuat database, tabel, indeks, atau prosedur tersimpan baru .

Pernyataan CREATE dalam SQL membuat komponen dalam sistem manajemen basis data relasional (RDBMS). Dalam spesifikasi SQL 1992, jenis komponen yang dapat dibuat adalah skema, tabel , tampilan , domain, kumpulan karakter , susunan , terjemahan, dan pernyataan. [2] Banyak implementasi memperluas sintaks untuk memungkinkan pembuatan elemen tambahan, seperti indeks dan profil pengguna. Beberapa sistem, seperti PostgreSQL dan SQL Server , mengizinkan CREATE , dan perintah DDL lainnya, di dalam transaksi basis datadan dengan demikian mereka dapat digulung kembali . [3] [4]

pernyataan CREATE TABLE 
Perintah CREATE yang umum digunakan adalah perintah CREATE TABLE . Penggunaan yang khas adalah:

BUAT TABEL [nama tabel] ( [definisi kolom] ) [parameter tabel]
Definisi kolom adalah:

Daftar yang dipisahkan koma yang terdiri dari salah satu dari berikut ini:
Definisi kolom: [nama kolom] [tipe data] {NULL | NOT NULL} {opsi kolom}
Definisi kunci utama : KUNCI UTAMA ( [daftar kolom yang dipisahkan koma] )
Batasan: {CONSTRAINT} [definisi kendala]
Fungsionalitas khusus RDBMS
Contoh statement untuk membuat tabel bernama employee dengan beberapa kolom adalah:

CREATE  TABLE  employee  ( 
    id             INTEGER        PRIMARY  KEY , 
    first_name     VARCHAR ( 50 )    not  null , 
    last_name      VARCHAR ( 75 )    not  null , 
    mid_name       VARCHAR ( 50 )    not  null , 
    dateofbirth    DATE           not  null 
);
Beberapa bentuk CREATE TABLE DDL dapat menggabungkan konstruksi seperti DML ( bahasa manipulasi data ), seperti sintaks SQL CREATE TABLE AS SELECT (CTaS). [5]

DROP pernyataan 
Pernyataan DROP menghancurkan database, tabel, indeks, atau tampilan yang ada.

Pernyataan DROP dalam SQL menghapus komponen dari sistem manajemen basis data relasional (RDBMS). Jenis objek yang dapat dijatuhkan tergantung pada RDBMS mana yang digunakan, tetapi sebagian besar mendukung penghapusan tabel , pengguna , dan database . Beberapa sistem (seperti PostgreSQL ) memungkinkan DROP dan perintah DDL lainnya terjadi di dalam transaksi dan dengan demikian dibatalkan . Penggunaan tipikal hanyalah:

DROP objecttype  objectname .
Misalnya, perintah untuk menjatuhkan tabel bernama karyawan adalah:

 karyawan DROP TABLE  ;
Pernyataan DROP berbeda dari pernyataan DELETE dan TRUNCATE , karena DELETE dan TRUNCATE tidak menghapus tabel itu sendiri. Misalnya, pernyataan DELETE mungkin menghapus beberapa (atau semua) data dari tabel sementara meninggalkan tabel itu sendiri dalam database, sedangkan pernyataan DROP menghapus seluruh tabel dari database.

ALTER pernyataan 
Pernyataan ALTER memodifikasi objek database yang ada.

Pernyataan ALTER dalam SQL mengubah properti objek di dalam sistem manajemen basis data relasional (RDBMS). Jenis objek yang dapat diubah tergantung pada RDBMS yang digunakan. Penggunaan yang khas adalah:

ALTER parameter objecttype  objectname  .
Misalnya, perintah untuk menambahkan (lalu menghapus) kolom bernama gelembung untuk tabel yang ada bernama sink adalah:

ALTER  TABLE  wastafel  TAMBAHKAN  gelembung  INTEGER ; 
ALTER  TABLE  sink  DROP  COLUMN  gelembung ;
Pernyataan TRUNCATE 
Pernyataan TRUNCATE digunakan untuk menghapus semua data dari tabel. Ini jauh lebih cepat daripada DELETE .

TRUNCATE  TABLE  table_name ;
Pernyataan integritas referensial 
Jenis lain dari kalimat DDL dalam SQL digunakan untuk mendefinisikan hubungan integritas referensial , biasanya diimplementasikan sebagai kunci utama dan tag kunci asing di beberapa kolom tabel. Kedua pernyataan ini dapat dimasukkan dalam kalimat CREATE TABLE atau ALTER TABLE ;

Bahasa lain 
Skema XML adalah contoh DDL untuk XML .
Skema JSON adalah contoh DDL untuk JSON .
Skema DFDL adalah contoh DDL yang dapat menggambarkan banyak format teks dan biner.
Lihat juga 
Bahasa kontrol data
Bahasa manipulasi data
Bahasa kueri data
Pilih (SQL)
Sisipkan (SQL)
Perbarui (SQL)
Hapus (SQL)
Memotong (SQL)
Referensi 
 Olle, T. William (1978). Pendekatan Codasyl untuk Manajemen Basis Data . Wiley. ISBN 0-471-99579-7.
"Teknologi Informasi - Bahasa Basis Data SQL" . SQL92 . Carnegie Mellon . Diakses pada 12 November 2018 .
 Laudenschlager, Douglas; Milener, Gen; Guyer, Craig; Byham, Rick. "Transaksi (Transact-SQL)" . Dokumen Microsoft . Microsoft . Diakses pada 12 November 2018 .
"Transaksi PostgreSQL" . Dokumentasi PostgreSQL 8.3 . PostgreSQL . Diakses pada 12 November 2018 .
 Allen, Hibah (2010). Panduan Definitif untuk SQLite . Aprespod. Mike Owens (2 edisi). tekan. hal.90–91. ISBN  9781430232254. Diakses 02-10-2012 . Pernyataan buat tabel memiliki sintaks khusus untuk membuat tabel dari pernyataan pilih . [...]: [...] buat tabel makanan2 sebagai pilih * dari makanan; [...] Banyak database lain merujuk pada pendekatan ini sebagai CTaS , yang merupakan singkatan dari Create Table as Select, dan frasa itu tidak jarang di antara pengguna SQLite.





Bahasa manipulasi data
Bahasa manipulasi data ( DML ) adalah bahasa pemrograman komputer yang digunakan untuk menambah (menyisipkan), menghapus, dan memodifikasi (memperbarui) data dalam database . DML sering merupakan subbahasa dari bahasa database yang lebih luas seperti SQL , dengan DML terdiri dari beberapa operator dalam bahasa tersebut. [1] Pemilihan data read -only terkadang dibedakan sebagai bagian dari bahasa kueri data (DQL) yang terpisah, tetapi ini terkait erat dan terkadang juga dianggap sebagai komponen DML; beberapa operator dapat melakukan pemilihan (membaca) dan menulis.

Bahasa manipulasi data yang populer adalah Structured Query Language (SQL), yang digunakan untuk mengambil dan memanipulasi data dalam database relasional . [2] Bentuk lain dari DML adalah yang digunakan oleh IMS /DLI, database CODASYL , seperti IDMS dan lain-lain.


Isi
1	SQL
2	Varian
3	Lihat juga
3.1	Pernyataan
3.2	Bahasa terkait
4	Referensi
5	Tautan eksternal
SQL 
Dalam SQL, bahasa manipulasi data terdiri dari pernyataan perubahan data SQL , [3] yang memodifikasi data yang disimpan tetapi bukan skema atau objek database. Manipulasi objek database persisten, misalnya tabel atau prosedur tersimpan , melalui pernyataan skema SQL, [3] daripada data yang disimpan di dalamnya, dianggap sebagai bagian dari bahasa definisi data (DDL) yang terpisah. Dalam SQL, kedua kategori ini serupa dalam sintaksis terperinci, tipe data, ekspresi, dll., Tetapi berbeda dalam fungsi keseluruhannya. [3]

Pernyataan perubahan data SQL adalah bagian dari pernyataan data SQL ; ini juga berisi pernyataan kueri SELECT , [3] yang sebenarnya merupakan bagian dari DQL, bukan DML. Namun dalam praktik umum, perbedaan ini tidak dibuat dan SELECT secara luas dianggap sebagai bagian dari DML, [4] sehingga DML terdiri dari semua pernyataan data SQL , tidak hanya pernyataan perubahan data SQL . Formulir SELECT ... INTO ...menggabungkan seleksi dan manipulasi, dan dengan demikian secara ketat dianggap sebagai DML karena memanipulasi (yaitu memodifikasi) data.

Bahasa manipulasi data memiliki kemampuan fungsional yang diatur oleh kata awal dalam sebuah pernyataan, yang hampir selalu berupa kata kerja . Dalam kasus SQL, kata kerja ini adalah:

SELECT ... FROM ... WHERE ...(sebenarnya DQL)
SELECT ... INTO ...
INSERT INTO ... VALUES ...
UPDATE ... SET ... WHERE ...
DELETE FROM ... WHERE ...
Misalnya, perintah untuk menyisipkan baris ke dalam tabel karyawan :

INSERT  INTO  employee  ( first_name ,  last_name ,  fname )  VALUES  ( 'John' ,  'Capita' ,  'xcapit00' );
Varian 
Kebanyakan implementasi database SQL memperluas kemampuan SQL mereka dengan menyediakan imperatif , yaitu bahasa prosedural. Contohnya adalah PL /SQL Oracle dan SQL_PL IBM Db2 .

Bahasa manipulasi data cenderung memiliki banyak rasa dan kemampuan yang berbeda antara vendor database. Ada sejumlah standar yang ditetapkan untuk SQL oleh ANSI , [2] tetapi vendor masih menyediakan ekstensi mereka sendiri ke standar sementara tidak menerapkan seluruh standar.

Bahasa manipulasi data dibagi menjadi dua jenis, pemrograman prosedural dan pemrograman deklaratif .

Bahasa manipulasi data awalnya hanya digunakan dalam program komputer , tetapi dengan munculnya SQL telah digunakan secara interaktif oleh administrator database.

Lihat juga 
kasar
Pernyataan 
Pilih (SQL)
Sisipkan (SQL)
Perbarui (SQL)
Hapus (SQL)
Bahasa terkait 
Bahasa kontrol data
Bahasa definisi data
Bahasa kueri data
Referensi 
 Chatham, Mark (2012). Bahasa Kueri Terstruktur Dengan Contoh - Volume I: Bahasa Kueri Data . p. 8 . ISBN 978-1-29119951-2.
SQL92
SQL92 4.22.2, pernyataan SQL diklasifikasikan berdasarkan fungsi
"Pernyataan Bahasa Manipulasi Data" . Oracle . Pernyataan bahasa manipulasi data (DML) meminta atau memanipulasi data dalam objek skema yang ada.
"Standar SQL92" .





Bahasa kueri data
Data Query Language ( DQL ) adalah bagian dari pengelompokan dasar sub-bahasa SQL . Sub-bahasa ini terutama dikategorikan ke dalam empat kategori: bahasa kueri data (DQL), bahasa definisi data (DDL), bahasa kontrol data (DCL), dan bahasa manipulasi data (DML). Kadang-kadang bahasa kontrol transaksi (TCL) dianggap sebagai bagian dari himpunan sub-bahasa juga.

Pernyataan DQL digunakan untuk melakukan kueri pada data dalam objek skema. Tujuan dari perintah DQL adalah untuk mendapatkan hubungan skema berdasarkan kueri yang diteruskan ke sana.

Meskipun sering dianggap sebagai bagian dari DML, pernyataan SQL SELECT secara tegas merupakan contoh DQL. Saat menambahkan manipulator data FROM atau WHERE ke pernyataan SELECT, pernyataan tersebut kemudian dianggap sebagai bagian dari DML.

Bahasa terkait 
Bahasa definisi data
Bahasa manipulasi data
Bahasa kontrol data
Bahasa Kontrol Transaksional